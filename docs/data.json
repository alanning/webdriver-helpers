{
    "project": {
        "name": "webdriver-helpers",
        "description": "Convenience functions for working with WebDriver in javascript",
        "version": "1.0"
    },
    "files": {
        "webdriver-helpers.js": {
            "name": "webdriver-helpers.js",
            "modules": {},
            "classes": {
                "WebDriverHelpers": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "WebDriverHelpers": {
            "name": "WebDriverHelpers",
            "shortname": "WebDriverHelpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "webdriver-helpers.js",
            "line": 28,
            "description": "Provides several functions that make using WebDriver more \nconvenient.\n\nUsed like this:\n\n  var webdriver = require('selenium-webdriver'),\n      driver,\n      helpers;\n  \n  driver = require('./drivers/selenium-server.js')(webdriver, {\n    browserName: 'chrome',\n    seleniumProtocol: 'WebDriver',\n    'chrome.switches': ['--window-size=1366,768'] // this is being ignored\n  });\n\n  driver.manage().timeouts().setScriptTimeout(5000);\n  driver.manage().timeouts().implicitlyWait(5000);\n\n  helpers = new WebDriverHelpers(webdriver, driver);\n\n  function login (email, password) {\n    helpers.populateElements({\n      '#login-email': email,\n      '#login-password': password\n    });\n\n    helpers.id('login-submit-btn').click();\n  }",
            "params": [
                {
                    "name": "webdriver",
                    "description": "selenium-webdriver instance",
                    "type": "Object"
                },
                {
                    "name": "driver",
                    "description": "browser driver instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "object with several convenience functions",
                "type": "Object"
            },
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "webdriver-helpers.js",
            "line": 18,
            "description": "Add properties from source object to target object",
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 72,
            "description": "Sugar for: this.driver.findElement(this.webdriver.By.name(args))",
            "itemtype": "method",
            "name": "name",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "webdriver element",
                "type": "Object"
            },
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 83,
            "description": "Sugar for: this.driver.findElement(this.webdriver.By.id(args))",
            "itemtype": "method",
            "name": "id",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "webdriver element",
                "type": "Object"
            },
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 94,
            "description": "Sugar for: this.driver.findElement(this.webdriver.By.tagName(args)",
            "itemtype": "method",
            "name": "tagName",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "webdriver element",
                "type": "Object"
            },
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 105,
            "description": "Sugar for: this.driver.findElement(this.webdriver.By.className(args))",
            "itemtype": "method",
            "name": "className",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "webdriver element",
                "type": "Object"
            },
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 116,
            "description": "Selects a drop-down option by value",
            "itemtype": "method",
            "name": "selectByValue",
            "params": [
                {
                    "name": "locator",
                    "description": "The locator\n    strategy to use when searching for the select element.",
                    "type": "webdriver.Locator|Object.<string>"
                },
                {
                    "name": "value",
                    "description": "The value of the option to select",
                    "type": "String"
                }
            ],
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 130,
            "description": "Selects a radio button element by value",
            "itemtype": "method",
            "name": "radioByValue",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the radio button group",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the option to select",
                    "type": "String"
                }
            ],
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 143,
            "description": "Pauses for a short amount of time, giving webdriver time\nto re-render the page, if needed.",
            "itemtype": "method",
            "name": "avoidStaleElement",
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 158,
            "description": "Easily set values of form elements by passing a map of \ncss selector / element value pairs.\n\nEx:\n  // populate a radio button group, a select box, a text\n  // input and a textarea\n  var helpers = new WebDriverHelpers(webdriver, driver);\n  helpers.populateElements({\n    'input[name=\"gender\"][value=\"M\"]': 'M',\n    '#country': \"United States\",\n    '#age': '34',\n    '#comment': \"example msg\"\n  });",
            "itemtype": "method",
            "name": "populateElements",
            "params": [
                {
                    "name": "locatorValuePairs",
                    "description": "key/value pairs consisting of a css \n                   string locator for a form element and a string or \n                   array of strings to populate the element with.",
                    "type": "Object"
                }
            ],
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 201,
            "description": "Find first element in a group who's text matches parameter.\n\nFor example:\n\n  var findPersonByName = function (nameOfPerson) {\n    var collectionLocator = {\n          'css':'div.people > .person'\n        },\n        criteriaLocator = {\n          'className':'name'\n        };\n        \n    return findElementInCollectionByText(\n        collectionLocator,\n        criteriaLocator,\n        nameOfPerson\n      );\n  };\n\n...can be called like:\n\n  it(\"can click person\",\n    function (done) {\n      authenticate().\n        then(findPersonByName(\"Jeff Winger\")).\n        then(clickPerson).\n        then(finish(done), error);\n    });\n\n...and will match:\n\n  <div class=\"people\">\n    <div class=\"person\">\n      <p class=\"name\">Jeff Winger</p>\n      <p class=\"pic\">...</p>\n    </div>\n  </div>",
            "itemtype": "method",
            "name": "findElementInCollectionByText",
            "params": [
                {
                    "name": "collectionLocator",
                    "description": "The locator \n    for the group of elements to search",
                    "type": "webdriver.Locator|Object.<string>"
                },
                {
                    "name": "criteriaLocator",
                    "description": "The locator \n    for the element who's text should be compared, relative to collection",
                    "type": "webdriver.Locator|Object.<string>"
                },
                {
                    "name": "text",
                    "description": "The text to search for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A function that, when executed, returns a promise that \n    will be resolved with the matching element.",
                "type": "Function"
            },
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 298,
            "description": "Populate textbox(es) with string value(s).  If 'strings' is an \narray, locator is assumed to match a group of textboxes which \nall have the same name.  \n\nThis function performs a new find for each subsequent textbox \nin order to support dynamically added inputs.  For example, when\na second input field is added once a value is entered into the \nfirst input.",
            "itemtype": "method",
            "name": "populateTextBox",
            "params": [
                {
                    "name": "locator",
                    "description": "The locator\n    strategy to use when locating the target input box(es)",
                    "type": "webdriver.Locator|Object.<string>"
                },
                {
                    "name": "strings",
                    "description": "The values to populate\n    into the text box(es)",
                    "type": "String | array<string>"
                }
            ],
            "return": {
                "description": "A function which, when executed, populates\n    the target text boxes",
                "type": "Function"
            },
            "class": "WebDriverHelpers"
        },
        {
            "file": "webdriver-helpers.js",
            "line": 359,
            "description": "Sets the value of a form element.  \n\nSupports the following form elements:\n  input - text, radio, email, password\n  textarea\n  select",
            "itemtype": "method",
            "name": "populateElement",
            "params": [
                {
                    "name": "locator",
                    "description": "The locator\n    strategy to use when searching for the form element.",
                    "type": "webdriver.Locator|Object.<string>"
                },
                {
                    "name": "strings",
                    "description": "The target value(s) of\n    into the form element(s)",
                    "type": "String | array<string>"
                }
            ],
            "class": "WebDriverHelpers"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nAdd properties from source object to target object",
            "line": " webdriver-helpers.js:18"
        }
    ]
}